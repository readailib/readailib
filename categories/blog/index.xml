<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on ReadAILib Official Website </title>
    <link>/categories/blog/</link>
    <description>Recent content in Blog on ReadAILib Official Website </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 04 Mar 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CentOS6源码安装MySQL</title>
      <link>/2018/03/04/how-to-install-mysql-from-source-on-centos-6/</link>
      <pubDate>Sun, 04 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/03/04/how-to-install-mysql-from-source-on-centos-6/</guid>
      <description>首先确定本机是安装了开发工具包套件（里面含有gcc等编译器）以及相关的make套件。使用下面命令进行安装。
yum groupinstall &amp;quot;Development Tools&amp;quot; –yyum install cmake ncurses-devel -y然后依照下面的命令从官方网站上下载源码包。
wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-boost-5.7.20.tar.gz使用下面的命令进行解压缩并切换到该目录下，并使用cmake命令进行编译。
tar -xvzf mysql-boost-5.7.20.tar.gzcd mysql-5.7.20/cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr/local/mysql \-DWITH_BOOST=/root/mysql-5.7.20/boost/然后执行make和make install命令，这会持续很长时间（在我的虚拟机上有一个小时左右），耐心等待即可。
make &amp;amp; make install出现下面的信息，基本就是安装成功了。
-- Installing: /usr/local/mysql/mysql-test/./collections/mysql-5.7-stage.push-- Installing: /usr/local/mysql/mysql-test/./collections/default.weekly-- Installing: /usr/local/mysql/mysql-test/./collections/disabled-weekly.list-- Installing: /usr/local/mysql/mysql-test/./collections/default.push-valgrind-- Installing: /usr/local/mysql/mysql-test/./collections/disabled-gtid-on.list-- Installing: /usr/local/mysql/mysql-test/./collections/default.release.done-- Installing: /usr/local/mysql/mysql-test/./collections/default.push-- Installing: /usr/local/mysql/mysql-test/./collections/disabled-daily.list-- Installing: /usr/local/mysql/mysql-test/./collections/README.experimental-- Installing: /usr/local/mysql/mysql-test/./collections/default.daily-valgrind-- Installing: /usr/local/mysql/mysql-test/./collections/default.weekly-valgrind-- Installing: /usr/local/mysql/mysql-test/./collections/coverage.ignore-- Installing: /usr/local/mysql/mysql-test/./collections/default.push-ndbcluster-- Installing: /usr/local/mysql/mysql-test/.</description>
    </item>
    
    <item>
      <title>R实战-决策树</title>
      <link>/2017/12/30/r%E5%AE%9E%E6%88%98-%E5%86%B3%E7%AD%96%E6%A0%91/</link>
      <pubDate>Sat, 30 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/30/r%E5%AE%9E%E6%88%98-%E5%86%B3%E7%AD%96%E6%A0%91/</guid>
      <description>本篇内容，会继续介绍一些常用的数据挖掘模型：
这里拿网络上一个公开数据(铁达尼号的乘客数据)来进行分析，资料载点如下。
决策树(Decision Tree)无论在分类或预测上，决策树的算法都有很好的效果。
但它最强大的地方，莫过于树状分支的结构：可以明显呈现分类的规则！与一些机器学习的方法(NN, SVM…)相比，相当容易进行解释，以及分析规则之间的关系。
这里就简单用CART决策树来练习，对应的套件是rpart，一样使用上次铁达尼号的数据：
# 记得要给定数据所在的路径(path)，例如：我把下载的资料放在C槽下：load(&amp;quot;F:\\01_学习资料\\R\\Data-Mining-master\\Source-File\\決策樹\\titanic.raw.rdata&amp;quot;) #汇入.rdata檔require(rpart)# 先把数据区分成 train=0.8, test=0.2 set.seed(22)train.index &amp;lt;- sample(x=1:nrow(titanic.raw), size=ceiling(0.8*nrow(titanic.raw) ))train &amp;lt;- titanic.raw[train.index, ]test &amp;lt;- titanic.raw[-train.index, ]# CART的模型：把存活与否的变数(Survived)当作Y，剩下的变数当作Xcart.model&amp;lt;- rpart(Survived ~. , data=train)# 输出各节点的详细信息(呈现在console窗口)cart.model## n= 1761 ## ## node), split, n, loss, yval, (yprob)## * denotes terminal node## ## 1) root 1761 558 No (0.68313458 0.31686542) ## 2) Sex=Male 1398 288 No (0.</description>
    </item>
    
    <item>
      <title>隐马尔可夫模型</title>
      <link>/2017/12/23/hmm/</link>
      <pubDate>Sat, 23 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/23/hmm/</guid>
      <description>很早就想写一篇关于隐马尔可夫模型的文章了，这次刻意的将模型及其有关算法复习了一下，才有了这个信心去写了这篇文章。这篇文章主要参考了李航老师的《统计机器学习》 部分内容和徐亦达老师在油管上的教程1。并且这里的隐马尔可夫模型主要是指离散形式的动态模型。
隐马尔可夫模型主要是一种可用于标注问题的统计学习模型，描述由隐藏的马尔可夫链随机生成观测序列的过程，属于生成模型。近些年来主要用于语音信号处理，自然语言处理，生物信息，金融分析等领域，该教程涉及很多概率计算问题，所以希望读者能够有概率背景的情况下，阅读更佳。
本部分主要介绍一下几个部分：
HMM现象马尔可夫过程/链算法直接计算法前向-后向算法前向算法后向算法学习算法总结HMM现象玩股票的朋友都知道，图右，在市场规则下，股民只知道股票的涨停和不变这三种表面现象，而人们并不希望仅仅知道市场的涨停，而是想知道市场隐藏的信息，比如现在股票市场是熊市还是牛市，因为知道这些隐藏的信息之后，我们可以利用这些信息去长期跟进还是及时退出，以防市场大变。在这里我们称这种人们表面上能观察出来的现象为观测（observation），而那些隐藏的变量被称作状态。
有了上面比较直观的介绍以后，我们就可以定义什么是隐马尔可夫模型了。
定义10.1（隐马尔可夫模型）　隐马尔可夫模型是关于时序的概率模型，描述由一个隐藏的马尔可夫链随机生成不可观测的状态随机序列，再由各个状态生成一个观测而产生观测随机序列的过程。隐藏的马尔可夫链随机生成的状态的序列，称为状态序列（state sequence）；每个状态生成一个观测，而由此产生的观测的随机序列，称为观测序列（observation sequence）。序列的每一个位置又可以看作是一个时刻。
比如：上图的Bull-&amp;gt;Bear-&amp;gt;Event就是其中一个状态序列，而其产生的观测形成的序列up-&amp;gt;down-&amp;gt;unchange被称作观测序列，而这些序列在一定假设下，具有非常好的概率性质。
马尔可夫链上图是隐马尔可夫的概率图模型，概率图反应了事件的依赖和独立关系。
首先我们要说明q表示状态，不可观测。y表示可观测的现象。假设状态与状态之间、状态与观测现象之间均满足马尔可夫过程，其中该过程要求具备“无记忆”的性质（马尔可夫性质）：下一状态的概率分布只能由当前状态决定，在时间序列中前面的事件均与之无关。 用数学语言表示为：
\[\Pr(X_{{n+1}}=x\mid X_{1}=x_{1},X_{2}=x_{2},\ldots ,X_{n}=x_{n})=\Pr(X_{{n+1}}=x\mid X_{n}=x_{n})\]
那么根据概率图模型，我们得出了两个重要的公式：
离散状态转移概率： \[p(q_t |q_1, . . . , q_{t−1}, y_1, . . . , y_{t−1}) = p(q_t |q_{t−1})\]
离散/连续观测概率： \[p(y_t |q_1, . . . , q_{t−1}, y_1, . . . , y_{t−1}) = p(y_t |q_t )\]</description>
    </item>
    
    <item>
      <title>单变量线性回归</title>
      <link>/2017/12/21/single-variable-linear-regression/</link>
      <pubDate>Thu, 21 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/21/single-variable-linear-regression/</guid>
      <description>该笔记是来自 Andrew Ng 的 Machine Learning 课程的第二周:单变量线性回归的课堂记录，主要讲解了以下几个内容:
代价函数梯度下降算法模型表达还是上一个关于房屋价格预测的例子，给你一组房屋的大小和对应房屋的价格的数据，让你对数据进行建模，使得对于其他的房屋的大小更好的拟合出更准确的价格出来。如图1所示。图 1: 房屋价格预测模型题外话：首先数据是一组关于标准输入与标准答案的数据集，那么对该数据进行建模，是属于监督学习任务。又因为数据只含有一个变量（\(size\)）即一个特征，且找到一条直线来拟合数据集，所以该问题又被称为单变量线性回归问题。
图2是部分的样本数据，其中\(X\)表示房屋的大小，\(Y\)表示对应房屋的价格。图 2: 数据为了后面更好的描述，所以对一些符号进行声明：
\(m\) 训练集中实例的数量\(x&amp;#39;s\) 输入变量或者特征\(y&amp;#39;s\) 输出变量或目标变量\((x,y)\) 一个训练样本\((x^{(i)},y^{(i)})\) 第\(i\)个训练样本 \end{itemize}有了数据之后，可以用下图就可以描述房屋价格预测问题建模的过程。图 3: 建模的过程图片描述：因而解决房屋价格预测问题，实际上就是要将训练集”喂给“我们的学习算法，进而学习到一个假设\(h\)，然后将要预测的房屋尺寸作为输入变量输入给\(h\)，预测出该房屋的交易价格作为输出结果。其实\(h\)就是一个我们要学习的函数。
我们如何表示函数呢？对于单变量线性回归问题来说，\(h_{\theta}(x) = \theta_{0} + \theta_{1} x\).
代价函数引入代价函数有了训练数据，也有了模型的表示\(h\)，但是问题是如何选择 \(\theta_{0}\) 和 \(\theta_{1}\) ?
基本想法是选择\(\theta_{0}\)，\(\theta_{1}\)以使得在训练集上\(h_{\theta}(x)\)接近\(y\).用数学表达式表示出来，如下： \[minimize_{\theta{0},\theta_{1}}\frac{1}{2m}\sum_{i=1}^{m}(h_{\theta}(x^{(i)})- y^{(i)})^{2}\]
注意： 在学习的时候，有一个区别，\(loss function\)描述的是单个样本误差，而\(cost\) \(function\)描述整个训练集的误差。
同样地，为了更好的下文描述，将其简化：
\[J(\theta_{0},\theta_{1}) = \frac{1}{2m}\sum_{i=1}^{m}(h_{\theta}(x^{(i)})- y^{(i)})^{2}\]</description>
    </item>
    
    <item>
      <title>在树莓派上配置AP</title>
      <link>/2017/12/21/aphot-rpi/</link>
      <pubDate>Thu, 21 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/21/aphot-rpi/</guid>
      <description>有了一个新的树莓派之后，如果不将它配置成AP热点，你就失去了他的其中的一个优势，如果你的家里面没有无限路由器或者你的家里信号不能遍及，树莓派是你最好的选择，利用流量包转发的优势，大大地节约了成本，并且他支持多种转发机制，这是很重要的特点，是你的网络随时处于移动状态，不像传统的路由器，如果固定到某个地方之后就不能动了，而树莓派是一个可以移动的热点。稳定是最主要的特点。
本文参考1。
必需的包hostapddnsmasqsudo apt-get install dnsmasq hostapd配置网卡将wlan1（购买的网卡）配置一个静态IP地址, 首先告诉树莓派DHCP获取IP时忽略WLAN1
sudo nano /etc/dhcpcd.conf在文件的最后添加：
denyinterfaces wlan1 配置静态IP
sudo nano /etc/network/interfaces文件内容如下：
allow-hotplug wlan1 iface wlan1 inet static address 172.24.1.1netmask 255.255.255.0network 172.24.1.0broadcast 172.24.1.255# wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf重启DHCP服务。
sudo apt-get install dhcpcd5 #如果没有这个服务sudo service dhcpcd restart然后重启WLAN1设备以适应配置
sudo ifdown wlan1; sudo ifup wlan1配置HOSTAPD文件sudo nano /etc/hostapd/hostapd.conf内容是：
# This is the name of the WiFi interface we configured aboveinterface=wlan1# Use the nl80211 driver with the brcmfmac driverdriver=nl80211# This is the name of the networkssid=Pi3-AP# Use the 2.</description>
    </item>
    
    <item>
      <title>Display Image Using R</title>
      <link>/2017/12/19/display-image-using-r/</link>
      <pubDate>Tue, 19 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/19/display-image-using-r/</guid>
      <description>{r fig-margin, echo=FALSE, fig.cap=&amp;quot;这是一个神经网络的图。&amp;quot;, fig.height=3.5, fig.margin=TRUE, warning=FALSE, background=&amp;quot;#f5f5d5&amp;quot;, cache=FALSE}# need png packagelibrary(png)#Replace the directory and file information with your infoima &amp;lt;- readPNG(&amp;quot;C:\\Users\\Shine\\Desktop\\readailib\\themes\\hugo-lithium-theme\\static\\images\\logo.png&amp;quot;)grid::grid.raster(ima)Figure 1: 这是一个神经网络的图。</description>
    </item>
    
    <item>
      <title>为我的博客安装评论插件</title>
      <link>/2017/12/14/add-comment-to-your-blog/</link>
      <pubDate>Thu, 14 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/14/add-comment-to-your-blog/</guid>
      <description>今天尝试了一下不同得评论系统，现在将我设置评论系统的安装方法以及设置步骤总结出来，分享给大家.
1.Disqusdisqus是一个支持多社交账号和自家的账号的评论插件，是一个广泛使用的评论插件，主要依赖于你必须要在disqus进行设置。但是墙内的用户无法使用，这是比较不方便的地方。
首先需要创建并设置disqus，进入管理界面，按照图1进行填写.
图1 填写要求填写完成之后，点击Create Site按钮，就可以进行下一步配置.
图2 配置要求说明填写完成后，就可以点击Complete Setup，完成配置，但是重要的一点不要忘记是，必须要记住disqusShortname，那你可以通过下面的方式进行查询，比如
图3 disqusShortname查看方式完成之后，就可以在blogdown里面的config.toml中进行配置了，
disqusShortname = &amp;quot;readailib&amp;quot;然后就可以启用了.效果如下
图4 disqus效果2.gitment首先Register a new OAuth application，填写要求
图5 Register a new OAuth application Principle注册完成之后会返回下面的画面，记住client_id 和 client_secret就行了。
图6 记住client_id 和 client_secret然后在 themes\hugo-lithium-theme\layouts\partials文件中添加一个新的文件gitment.html，文件内容如下
&amp;lt;div id=&amp;quot;container&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://imsun.github.io/gitment/style/default.css&amp;quot;&amp;gt;&amp;lt;script src=&amp;quot;https://imsun.github.io/gitment/dist/gitment.browser.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt;var gitment = new Gitment({id: &amp;#39;location.href&amp;#39;, // owner: &amp;#39;rh01&amp;#39;,repo: &amp;#39;readailib&amp;#39;,oauth: {client_id: &amp;#39;3724d1f38c45d652612b&amp;#39;,client_secret: &amp;#39;cc24fc9ed88bf9eddd44f1319a7056e5d8690d12&amp;#39;,},})gitment.</description>
    </item>
    
  </channel>
</rss>